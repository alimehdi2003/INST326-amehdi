AI Usage Journal
Abbas Mehdi
amehdi@terpmail.umd.edu
Section 0203
Week 1

The beginning week of the semester I used GEMENI AI to figure out what formatting mistakes I made in my print statements
that involved f strings and printing the numeric outputs of variables. I also needed to understand what syntax errors I made.
I asked GEMENI to help me understand python concepts that I found to be foreign and forgotten such as slicing as well understanding
the type() comamand. I was a bit stumped when it came to some of the exercise computations unsure why the output value wasn't rounded to two decimal places
debugging and asking me to show the correct format. I also found extracting specific parts of a string (prefix, section, cutter) using only .find()/.rfind() 
and slicing can be tricky. 

I usually prefer using Chat GPT but since GEMENI has already part of the jupyter file it more reliable to use rather paste code on Chat GPT

Week 2

I used GEMENI a lot for this week's exercises. I used Gemini a lot for this week’s exercises because I had difficulty distinguishing between working with entire lists and accessing individual elements inside loops. I also struggled with printing results inside loops when I really only needed to display the outcome. Another challenge was remembering to update the correct variable during comparisons, such as finding the longest title or the maximum value. At times, I forgot to handle the “not found” or default case when running searches, which caused incomplete solutions. My loop logic often became more complicated than necessary, making problems harder than they needed to be. I sometimes printed the wrong value, such as showing an index instead of the corresponding name. such as distinguishing between entire lists and single elements in loops (like when printing each book’s availability), printing results inside loops instead of only once at the end (as in counting checked-out books), updating the correct variable during comparisons (for example, finding the longest title or the most active borrower), handling “not found” cases in searches (like when a book was missing), simplifying loop logic (for instance, when merging two shelves), and printing the wrong values, such as indices instead of matching titles or authors.

Week 3

I was practicing some Python problems on my own and used ChatGPT when I got stuck. In one exercise, I had to work with strings by joining first and last names together and then filtering them based on the starting letters. I wrote the code and asked ChatGPT to check if it was correct, and it confirmed that using string concatenation, comparisons, and sorting was the right approach. In another exercise, I needed to handle lists that contained None values and replace those with the text “Not Yet Processed.” I wasn’t sure of the best way to do it, so ChatGPT walked me through a method where I separated the data and then merged it back while adding the text in place of the None values. This gave me the correct output and helped me better understand how to handle missing values in Python.

Regarding this week's exercises, I realized that I needed to pay closer attention to the structure of functions, especially remembering how to use def, write parameters correctly, and keep my indentation consistent. Sometimes I mixed up when to use variables inside a function versus passing them in, and I also forgot to return values, which meant my functions didn’t actually give anything back. I had to slow down to understand how return statements work and why they matter.

Another area where I needed practice was with conditionals and booleans. Checking availability, flipping between True and False, and setting up if and else branches sometimes felt confusing, but seeing working examples helped me figure out the patterns. I also learned how to use string methods like .strip(), .lower(), .upper(), and title() to clean up and compare text. This was especially useful when building functions that search for titles or match prefixes.

Working with lists was another challenge. I had to understand the difference between looping by index and looping directly over items, and it took practice to see when each approach was better.


Week 4:
For Week 4, I relied heavily on AI assistance to complete the exercises because they were difficult for me to solve on my own. Each exercise asked for defining a new class, setting up attributes with an `__init__` method, and writing one or more instance methods. While I understood the overall goals, I struggled with remembering the exact syntax and figuring out how to connect attributes and methods correctly. Because of that, I asked the AI for help on all 20 exercises.

After running the tests, I could see that the methods produced the expected results. This process helped me learn by example, even though I wasn’t always able to write the code independently. I now realize that I need more practice applying these ideas without step-by-step guidance so I can grow my confidence and problem-solving skills in Python.


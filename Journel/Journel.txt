AI Usage Journal
Abbas Mehdi
amehdi@terpmail.umd.edu
Section 0203
Week 1

The beginning week of the semester I used GEMENI AI to figure out what formatting mistakes I made in my print statements
that involved f strings and printing the numeric outputs of variables. I also needed to understand what syntax errors I made.
I asked GEMENI to help me understand python concepts that I found to be foreign and forgotten such as slicing as well understanding
the type() comamand. I was a bit stumped when it came to some of the exercise computations unsure why the output value wasn't rounded to two decimal places
debugging and asking me to show the correct format. I also found extracting specific parts of a string (prefix, section, cutter) using only .find()/.rfind() 
and slicing can be tricky. 

I usually prefer using Chat GPT but since GEMENI has already part of the jupyter file it more reliable to use rather paste code on Chat GPT

Week 2

I used GEMENI a lot for this week's exercises. I used Gemini a lot for this week’s exercises because I had difficulty distinguishing between working with entire lists and accessing individual elements inside loops. I also struggled with printing results inside loops when I really only needed to display the outcome. Another challenge was remembering to update the correct variable during comparisons, such as finding the longest title or the maximum value. At times, I forgot to handle the “not found” or default case when running searches, which caused incomplete solutions. My loop logic often became more complicated than necessary, making problems harder than they needed to be. I sometimes printed the wrong value, such as showing an index instead of the corresponding name. such as distinguishing between entire lists and single elements in loops (like when printing each book’s availability), printing results inside loops instead of only once at the end (as in counting checked-out books), updating the correct variable during comparisons (for example, finding the longest title or the most active borrower), handling “not found” cases in searches (like when a book was missing), simplifying loop logic (for instance, when merging two shelves), and printing the wrong values, such as indices instead of matching titles or authors.
